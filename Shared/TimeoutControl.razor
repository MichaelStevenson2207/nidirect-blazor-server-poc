@using System.Diagnostics
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject SignInManager<IdentityUser> SignInManager

@if (_shouldRender)
{
    <div id="timeout-dialog" class="modal" aria-live="assertive" aria-modal="true">
        <div class="modal-dialog-box" role="alertdialog" aria-describedby="aria-timeout-label">
            <span class="govuk-visually-hidden-focusable" id="aria-timeout-label">
        
                Your session will expire in 2:00 minutes. Any information you entered without saving will be lost. Do you want more time to continue?
            </span>
      
            <h2>Your application will time out soon</h2>
     
            <p class="govuk-body" id="expiring-in-message" role="timer" aria-live="off">
                Your application will time out in 20:00 minutes
            </p>
        
            <p class="govuk-body">Any information you entered without saving will be lost. We do this to keep your information secure.</p>
        
            <p>
                <button class="govuk-button" @onclick="ResetTimer">Continue application</button>
                <button class="govuk-button govuk-button--secondary" @onclick="EndSession">End session</button>
            </p>
        </div>
    </div>
}

@code {

    [Parameter]
    public int DelayInMinutes { get; set; } = 5; 

    private bool _shouldRender = false;

    protected override void OnInitialized()
    {
        Task.Delay(DelayInMinutes * 1000).ContinueWith(_ =>
        {
            _shouldRender = true;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ResetTimer()
    {
        _shouldRender = false;
        StateHasChanged();
    }

    private void EndSession()
    {
        Navigation.NavigateTo("/Identity/Account/LogOut", true);
    }
}